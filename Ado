using Microsoft.AspNetCore.Mvc;
using System.Data;
using Microsoft.Data.SqlClient;
using crudeDemok.Models;

namespace crudeDemok.Controllers;

public class HomeController : Controller
{
    private readonly string _conStr;
    public HomeController(IConfiguration config)
    {
        _conStr = config.GetConnectionString("TraviyoDB");
        Console.WriteLine("Connection String: " + _conStr); // debug
    }


    // ====================== Dropdown Helpers ======================
    private List<Country> GetCountries()
    {
        List<Country> list = new();
        using (SqlConnection con = new SqlConnection(_conStr))
        {
            SqlCommand cmd = new SqlCommand("sp_GetCountries", con);
            cmd.CommandType = CommandType.StoredProcedure;
            con.Open();
            SqlDataReader dr = cmd.ExecuteReader();
            while (dr.Read())
            {
                list.Add(new Country
                {
                    CountryId = Convert.ToInt32(dr["CountryId"]),
                    CountryName = dr["CountryName"].ToString()
                });
            }
        }
        return list;
    }

    private List<State> GetStates(int countryId)
    {
        List<State> list = new();
        using (SqlConnection con = new SqlConnection(_conStr))
        {
            SqlCommand cmd = new SqlCommand("sp_GetStatesByCountry", con);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@CountryId", countryId);
            con.Open();
            SqlDataReader dr = cmd.ExecuteReader();
            while (dr.Read())
            {
                list.Add(new State
                {
                    StateId = Convert.ToInt32(dr["StateId"]),
                    StateName = dr["StateName"].ToString(),
                    CountryId = countryId
                });
            }
        }
        return list;
    }

    private List<City> GetCities(int stateId)
    {
        List<City> list = new();
        using (SqlConnection con = new SqlConnection(_conStr))
        {
            SqlCommand cmd = new SqlCommand("sp_GetCitiesByState", con);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@StateId", stateId);
            con.Open();
            SqlDataReader dr = cmd.ExecuteReader();
            while (dr.Read())
            {
                list.Add(new City
                {
                    CityId = Convert.ToInt32(dr["CityId"]),
                    CityName = dr["CityName"].ToString(),
                    StateId = stateId
                });
            }
        }
        return list;
    }

    public JsonResult GetStatesJson(int countryId)
    {
        return Json(GetStates(countryId));
    }

    public JsonResult GetCitiesJson(int stateId)
    {
        return Json(GetCities(stateId));
    }

    // ====================== CRUD ======================
    public IActionResult Index(List<Student> students)
    {
        List<Student> stu = new();
        using (SqlConnection con = new SqlConnection(_conStr))
        {
            SqlCommand cmd = new SqlCommand("sp_GetStudents", con);
            cmd.CommandType = CommandType.StoredProcedure;
            con.Open();
            SqlDataReader dr = cmd.ExecuteReader();
            while (dr.Read())
            {
                stu.Add(new Student
                {
                    RollNo = dr["RollNo"] != DBNull.Value ? Convert.ToInt32(dr["RollNo"]) : 0,
                    Name = dr["Name"] != DBNull.Value ? dr["Name"].ToString() : string.Empty,
                    Section = dr["Section"] != DBNull.Value ? Convert.ToInt32(dr["Section"]) : 0,
                    Gender = dr["Gender"] != DBNull.Value ? dr["Gender"].ToString() : string.Empty,
                    Email = dr["Email"] != DBNull.Value ? dr["Email"].ToString() : string.Empty,
                    CountryId = dr["CountryId"] != DBNull.Value ? Convert.ToInt32(dr["CountryId"]) : 0,
                    StateId = dr["StateId"] != DBNull.Value ? Convert.ToInt32(dr["StateId"]) : 0,
                    CityId = dr["CityId"] != DBNull.Value ? Convert.ToInt32(dr["CityId"]) : 0
                });

            }
        }
        return View( stu);
    }

    [HttpGet]
    public IActionResult Create()
    {
        ViewBag.Countries = GetCountries();
        return View();
    }

    [HttpPost]
    public IActionResult Create(Student s)
    {
        using (SqlConnection con = new SqlConnection(_conStr))
        {
            SqlCommand cmd = new SqlCommand("sp_InsertStudent", con);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@Name", s.Name);
            cmd.Parameters.AddWithValue("@Section", s.Section);
            cmd.Parameters.AddWithValue("@Gender", s.Gender);
            cmd.Parameters.AddWithValue("@Email", s.Email);
            cmd.Parameters.AddWithValue("@CountryId", s.CountryId);
            cmd.Parameters.AddWithValue("@StateId", s.StateId);
            cmd.Parameters.AddWithValue("@CityId", s.CityId);
            con.Open();
            cmd.ExecuteNonQuery();
        }
        return RedirectToAction("Index");
    }

    [HttpGet]
    public IActionResult Edit(int id)
    {
        Student s = new();
        using (SqlConnection con = new SqlConnection(_conStr))
        {
            SqlCommand cmd = new SqlCommand("sp_GetStudentById", con);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@RollNo", id);
            con.Open();
            SqlDataReader dr = cmd.ExecuteReader();
            if (dr.Read())
            {
                s.RollNo = Convert.ToInt32(dr["RollNo"]);
                s.Name = dr["Name"].ToString();
                s.Section = Convert.ToInt32( dr["Section"]);
                s.Gender = dr["Gender"].ToString();
                s.Email = dr["Email"].ToString();
                s.CountryId = Convert.ToInt32(dr["CountryId"]);
                s.StateId = Convert.ToInt32(dr["StateId"]);
                s.CityId = Convert.ToInt32(dr["CityId"]);
            }
        }
        ViewBag.Countries = GetCountries();
        return View(s);
    }

    [HttpPost]
    public IActionResult Edit(Student s)
    {
        using (SqlConnection con = new SqlConnection(_conStr))
        {
            SqlCommand cmd = new SqlCommand("sp_UpdateStudent", con);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@RollNo", s.RollNo);
            cmd.Parameters.AddWithValue("@Name", s.Name);
            cmd.Parameters.AddWithValue("@Section", s.Section);
            cmd.Parameters.AddWithValue("@Gender", s.Gender);
            cmd.Parameters.AddWithValue("@Email", s.Email);
            cmd.Parameters.AddWithValue("@CountryId", s.CountryId);
            cmd.Parameters.AddWithValue("@StateId", s.StateId);
            cmd.Parameters.AddWithValue("@CityId", s.CityId);
            con.Open();
            cmd.ExecuteNonQuery();
        }
        return RedirectToAction("Index");
    }

    public IActionResult Delete(int id)
    {
        using (SqlConnection con = new SqlConnection(_conStr))
        {
            SqlCommand cmd = new SqlCommand("sp_DeleteStudent", con);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@RollNo", id);
            con.Open();
            cmd.ExecuteNonQuery();
        }
        return RedirectToAction("Index");
    }
}
