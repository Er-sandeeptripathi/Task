<appSettings>
  <add 
    key="ValidationSettings:UnobtrusiveValidationMode" 
    value="WebForms" />
</appSettings>


<configuration>
  <connectionStrings>
    <add name="YourConnectionStringName" 
         connectionString="Data Source=YourServerName;Initial Catalog=YourDatabaseName;Integrated Security=True" 
         providerName="System.Data.SqlClient" />
  </connectionStrings>
</configuration>



üì• 5. Register.aspx - Code

protected void btnRegister_Click(object sender, EventArgs e)
{
    string cs = ConfigurationManager.ConnectionStrings["constr"].ConnectionString;
    using (SqlConnection con = new SqlConnection(cs))
    {
        string query = "INSERT INTO Users(Name, Email, Password, State, City) VALUES(@Name, @Email, @Password, @State, @City)";
        SqlCommand cmd = new SqlCommand(query, con);
        cmd.Parameters.AddWithValue("@Name", txtName.Text);
        cmd.Parameters.AddWithValue("@Email", txtEmail.Text);
        cmd.Parameters.AddWithValue("@Password", txtPassword.Text);
        cmd.Parameters.AddWithValue("@State", ddlState.SelectedItem.Text);
        cmd.Parameters.AddWithValue("@City", ddlCity.SelectedItem.Text);
        con.Open();
        cmd.ExecuteNonQuery();
    }
    Response.Redirect("Login.aspx");
}


üîê 6. Login.aspx - Code
protected void btnLogin_Click(object sender, EventArgs e)
{
    string cs = ConfigurationManager.ConnectionStrings["constr"].ConnectionString;
    using (SqlConnection con = new SqlConnection(cs))
    {
        string query = "SELECT * FROM Users WHERE Email=@Email AND Password=@Password";
        SqlCommand cmd = new SqlCommand(query, con);
        cmd.Parameters.AddWithValue("@Email", txtEmail.Text);
        cmd.Parameters.AddWithValue("@Password", txtPassword.Text);
        con.Open();
        SqlDataReader dr = cmd.ExecuteReader();
        if (dr.HasRows)
        {
            dr.Read();
            Session["UserId"] = dr["Id"];
            Session["UserName"] = dr["Name"];
            Response.Redirect("Home.aspx");
        }
        else
        {
            lblMessage.Text = "Invalid credentials";
        }
    }
}
üè† 7. Home.aspx - After Login
protected void Page_Load(object sender, EventArgs e)
{
    if (Session["UserName"] != null)
    {
        lblWelcome.Text = "Welcome " + Session["UserName"];
    }
    else
    {
        Response.Redirect("Login.aspx");
    }
}
protected void lnkLogout_Click(object sender, EventArgs e)
{
    Session.Clear();
    Session.Abandon();
    Response.Redirect("Login.aspx");
}
‚úèÔ∏è 8. Edit.aspx - Update User Data
protected void Page_Load(object sender, EventArgs e)
{
    if (!IsPostBack)
    {
        if (Session["UserId"] != null)
        {
            string cs = ConfigurationManager.ConnectionStrings["constr"].ConnectionString;
            using (SqlConnection con = new SqlConnection(cs))
            {
                string query = "SELECT * FROM Users WHERE Id=@Id";
                SqlCommand cmd = new SqlCommand(query, con);
                cmd.Parameters.AddWithValue("@Id", Session["UserId"]);
                con.Open();
                SqlDataReader dr = cmd.ExecuteReader();
                if (dr.Read())
                {
                    txtName.Text = dr["Name"].ToString();
                    txtEmail.Text = dr["Email"].ToString();
                    ddlState.SelectedValue = dr["State"].ToString();
                    ddlCity.SelectedValue = dr["City"].ToString();
                }
            }
        }
    }
}

protected void btnUpdate_Click(object sender, EventArgs e)
{
    string cs = ConfigurationManager.ConnectionStrings["constr"].ConnectionString;
    using (SqlConnection con = new SqlConnection(cs))
    {
        string query = "UPDATE Users SET Name=@Name, State=@State, City=@City WHERE Id=@Id";
        SqlCommand cmd = new SqlCommand(query, con);
        cmd.Parameters.AddWithValue("@Name", txtName.Text);
        cmd.Parameters.AddWithValue("@State", ddlState.SelectedItem.Text);
        cmd.Parameters.AddWithValue("@City", ddlCity.SelectedItem.Text);
        cmd.Parameters.AddWithValue("@Id", Session["UserId"]);
        con.Open();
        cmd.ExecuteNonQuery();
    }
    Response.Redirect("Home.aspx");
}




protected void Page_Load(object sender, EventArgs e)
{
    if (!IsPostBack)
    {
        BindData();
    }
}

private void BindData()
{
    string cs = ConfigurationManager.ConnectionStrings["constr"].ConnectionString;
    using (SqlConnection con = new SqlConnection(cs))
    {
        SqlDataAdapter da = new SqlDataAdapter("SELECT * FROM Users", con);
        DataTable dt = new DataTable();
        da.Fill(dt);
        GridView1.DataSource = dt;
        GridView1.DataBind();
    }
}
protected void Page_Load(object sender, EventArgs e)
{
    if (!IsPostBack)
    {
        BindData();
    }
}

private void BindData()
{
    string cs = ConfigurationManager.ConnectionStrings["constr"].ConnectionString;
    using (SqlConnection con = new SqlConnection(cs))
    {
        SqlDataAdapter da = new SqlDataAdapter("SELECT * FROM Users", con);
        DataTable dt = new DataTable();
        da.Fill(dt);
        GridView1.DataSource = dt;
        GridView1.DataBind();
    }
}
üóëÔ∏è 9. List.aspx - Show and Delete
protected void GridView1_RowDeleting(object sender, GridViewDeleteEventArgs e)
{
    int id = Convert.ToInt32(GridView1.DataKeys[e.RowIndex].Value);
    string cs = ConfigurationManager.ConnectionStrings["constr"].ConnectionString;
    using (SqlConnection con = new SqlConnection(cs))
    {
        SqlCommand cmd = new SqlCommand("DELETE FROM Users WHERE Id=@Id", con);
        cmd.Parameters.AddWithValue("@Id", id);
        con.Open();
        cmd.ExecuteNonQuery();
        BindData();
    }
}

protected void GridView1_RowDeleting(object sender, GridViewDeleteEventArgs e)
{
    int id = Convert.ToInt32(GridView1.DataKeys[e.RowIndex].Value);
    string cs = ConfigurationManager.ConnectionStrings["constr"].ConnectionString;
    using (SqlConnection con = new SqlConnection(cs))
    {
        SqlCommand cmd = new SqlCommand("DELETE FROM Users WHERE Id=@Id", con);
        cmd.Parameters.AddWithValue("@Id", id);
        con.Open();
        cmd.ExecuteNonQuery();
        BindData();
    }
}
Logout
protected void Page_Load(object sender, EventArgs e)
{
    Session.Clear();
    Session.Abandon();
    Response.Redirect("Login.aspx");
}


‚úÖ State-Wise City Dropdown (Bonus)
Use cascading dropdown:

In ddlState_SelectedIndexChanged, bind cities based on state.



protected void ddlState_SelectedIndexChanged(object sender, EventArgs e)
{
    string selectedState = ddlState.SelectedValue;

    string connectionString = ConfigurationManager.ConnectionStrings["YourConnectionStringName"].ConnectionString;

    using (SqlConnection conn = new SqlConnection(connectionString))
    {
        string query = "SELECT CityName FROM Cities WHERE StateName = @StateName";

        using (SqlCommand cmd = new SqlCommand(query, conn))
        {
            cmd.Parameters.AddWithValue("@StateName", selectedState);

            conn.Open();
            SqlDataReader reader = cmd.ExecuteReader();

            ddlCity.Items.Clear();
            while (reader.Read())
            {
                ddlCity.Items.Add(reader["CityName"].ToString());
            }
            reader.Close();
        }
    }
}


